import { Component, OnInit } from '@angular/core';
import { BroadcastService } from '../../service/broadcast.service';
import { AngularFireAuth } from 'angularfire2/auth';
import * as firebase from 'firebase/app';
import { Observable } from 'rxjs/Observable';
import { Router, ActivatedRoute, Params } from '@angular/router';
import { AngularFireDatabase, FirebaseListObservable, FirebaseObjectObservable } from 'angularfire2/database';


@Component({
  selector: 'app-allprojects',
  templateUrl: './allprojects.component.html',
  styleUrls: ['./allprojects.component.css']
})
export class AllprojectsComponent implements OnInit {

  allProjects: any;

  occupationList;
  sectorList;

  constructor(
    private broadcaster: BroadcastService,
    private db: AngularFireDatabase,
    private router: Router,
    private afAuth: AngularFireAuth
  ) {
    this.allProjects = [];
    this.occupationList = {};
    this.sectorList = {};
  }

  ngOnInit() {
    this.getAllProjects();
  }

  getAllProjects() {
    return new Promise((resolve, reject) => {
      const projectRef = this.db.list('/projects').subscribe(projectList => {
        const promiseList = [];
        for (let i = 0; i < projectList.length; i++) {
          promiseList.push(this.getProjectData(projectList[i].$key));
        }

        Promise.all(promiseList).then(result => {
          resolve('ok');
        }).catch(err => {
          reject(err);
        })
      });
    });

  }

  getProjectData(projectId) {
    return new Promise((resolve, reject) => {
      const projectDetailRef = this.db.object('/projects/' + projectId).subscribe(projectData => {
        if (projectData.state === '진행 중')
          this.allProjects.push(projectData);
        this.getOcuupation(projectId);
        this.getSector(projectId);
        resolve('ok');
      });
    });
  }

  getOcuupation(projectId) {
    return new Promise((resolve, reject) => {
      const occupationRef = this.db.list('/projects/' + projectId + '/occupation').subscribe(occupationList => {
        this.occupationList[projectId] = [];
        for (let i = 0; i < occupationList.length; i++) {
          this.occupationList[projectId].push(occupationList[i]);
        }

        Promise.all(this.occupationList[projectId]).then(result => {
          resolve('ok');
        }).catch(err => {
          reject(err);
        });
      });
    });
  }

  getSector(projectId) {
    return new Promise((resolve, reject) => {
      const sectornRef = this.db.list('/projects/' + projectId + '/sector').subscribe(sectorList => {
        this.sectorList[projectId] = [];
        for (let i = 0; i < sectorList.length; i++) {
          this.sectorList[projectId].push(sectorList[i]);
        }

        Promise.all(this.sectorList[projectId]).then(result => {
          resolve('ok');
        }).catch(err => {
          reject(err);
        });
      });
    });
  }

  clickProjectSuggesting(key: any) {
    this.router.navigate(['/hh/projectsuggesting', key]);
  }

}
